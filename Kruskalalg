class DisjointSet:
    def __init__(self, vertices):
        self.parent = {v: v for v in vertices}
        self.rank = {v: 0 for v in vertices}

    def find(self, u):
        if self.parent[u] != u:
            self.parent[u] = self.find(self.parent[u])  # Path compression
        return self.parent[u]

    def union(self, u, v):
        u_root = self.find(u)
        v_root = self.find(v)

        if u_root == v_root:
            return

        # Union by rank
        if self.rank[u_root] < self.rank[v_root]:
            self.parent[u_root] = v_root
        elif self.rank[u_root] > self.rank[v_root]:
            self.parent[v_root] = u_root
        else:
            self.parent[v_root] = u_root
            self.rank[u_root] += 1


def kruskal(vertices, edges):
    ds = DisjointSet(vertices)
    mst = []

    # Sort edges by weight
    edges.sort(key=lambda x: x[2])

    for u, v, weight in edges:
        if ds.find(u) != ds.find(v):
            ds.union(u, v)
            mst.append((u, v, weight))

    return mst


# Example from CLRS Figure 23.4
vertices = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i']
edges = [
    ('a', 'b', 4), ('a', 'h', 8),
    ('b', 'h', 11), ('b', 'c', 8),
    ('c', 'd', 7), ('c', 'f', 4), ('c', 'i', 2),
    ('d', 'e', 9), ('d', 'f', 14),
    ('e', 'f', 10),
    ('f', 'g', 2),
    ('g', 'h', 1), ('g', 'i', 6),
    ('h', 'i', 7)
]

mst = kruskal(vertices, edges)
print("Minimum Spanning Tree (Kruskal):", mst)
